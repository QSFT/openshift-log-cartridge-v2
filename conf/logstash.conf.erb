# See http://logstash.net/docs/latest/ for documentation on how to configure Logstash.

input {
    file {
     path => "<%= ENV['OPENSHIFT_LOG_DIR'] %>*access*.log"
     sincedb_path => "<%= ENV['OPENSHIFT_DATA_DIR'] %>/since.db"
     type => "apache"
	 codec => multiline {
		pattern => "^%{IPORHOST} "
		negate => true
		what => previous
     }
    }
	file {
     path => "<%= ENV['OPENSHIFT_LOG_DIR'] %>*haproxy*.log"
     sincedb_path => "<%= ENV['OPENSHIFT_DATA_DIR'] %>/since.db"
     type => "haproxy"
	 codec => multiline {
		pattern => "^%{SYSLOGTIMESTAMP} "
		negate => true
		what => previous
     }
    }
	file {
        path => "<%= ENV['OPENSHIFT_LOG_DIR'] %>*jboss*.log"
		sincedb_path => "<%= ENV['OPENSHIFT_DATA_DIR'] %>/since.db"
		type => "jboss"
        codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601} "
		  negate => true
		  what => previous
		}
    }
    file {
        path => "<%= ENV['OPENSHIFT_LOG_DIR'] %>*.log"
		sincedb_path => "<%= ENV['OPENSHIFT_DATA_DIR'] %>/since.db"
		type => "default"
        codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601} "
		  negate => true
		  what => previous
		}
    }
}

filter {
    if [type] == "apache" {
      grok {
        match => [
                      "message", "%{COMBINEDAPACHELOG}",
                      "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
                 ]
        break_on_match => false
      }
	} else if [type] == "haproxy" {
         grok {
           match => [
                      "message", "%{HAPROXYHTTP}",
                      "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
                   ]
                   break_on_match => false
         }
      } else if [type] == "jboss" {
         grok {
           match => [
                      "message", "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:level} (?<logmessage>(.|\r|\n)*)",
                      "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
                   ]
                   break_on_match => false
         }
       } else if [type] == "default" {
        grok {
           match => [
             "message", "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:level} (?m)%{GREEDYDATA:logmessage}",
             "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
           ]
          break_on_match => false
        }
      }	
	  ruby {
	    code => "require 'base64';
		event['enccred'] = Base64.encode64('<%= ENV['OPENSHIFT_DORADUS_USER'] %>:<%= ENV['OPENSHIFT_DORADUS_PWD'] %>').gsub(/\n/, '')"
      }
}

output {
    if [type] == "apache" {
		batched_http {
			http_method => "post"
			url => "http://<%= ENV['OPENSHIFT_DORADUS_HOST'] %>:<%= ENV['OPENSHIFT_DORADUS_PORT'] %>/LoggingApplication/logs_<%= ENV['OPENSHIFT_APP_NAME'] %>_<%= ENV['OPENSHIFT_NAMESPACE'] %>?tenant=<%= ENV['OPENSHIFT_DORADUS_TENANT'] %>"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{timestamp}", "LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "haproxy" {
		batched_http {
			http_method => "post"
			url => "http://<%= ENV['OPENSHIFT_DORADUS_HOST'] %>:<%= ENV['OPENSHIFT_DORADUS_PORT'] %>/LoggingApplication/logs_<%= ENV['OPENSHIFT_APP_NAME'] %>_<%= ENV['OPENSHIFT_NAMESPACE'] %>?tenant=<%= ENV['OPENSHIFT_DORADUS_TENANT'] %>"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{accept_date}", "LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "jboss" {
		batched_http {
			http_method => "post"
			url => "http://<%= ENV['OPENSHIFT_DORADUS_HOST'] %>:<%= ENV['OPENSHIFT_DORADUS_PORT'] %>/LoggingApplication/logs_<%= ENV['OPENSHIFT_APP_NAME'] %>_<%= ENV['OPENSHIFT_NAMESPACE'] %>?tenant=<%= ENV['OPENSHIFT_DORADUS_TENANT'] %>"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{time}", "LogLevel": "%{level}","LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "default" {
        batched_http {
			http_method => "post"
			url => "http://<%= ENV['OPENSHIFT_DORADUS_HOST'] %>:<%= ENV['OPENSHIFT_DORADUS_PORT'] %>/LoggingApplication/logs_<%= ENV['OPENSHIFT_APP_NAME'] %>_<%= ENV['OPENSHIFT_NAMESPACE'] %>?tenant=<%= ENV['OPENSHIFT_DORADUS_TENANT'] %>"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{time}", "LogLevel": "%{level}","LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
      }	
}
